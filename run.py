#!/usr/bin/env python3
"""
Script de d√©marrage pour l'application E-Commerce IA

Ce script facilite le d√©marrage de l'application en :
1. V√©rifiant les d√©pendances
2. Initialisant la base de donn√©es
3. Entra√Ænant le mod√®le de recommandation
4. Lan√ßant l'application Flask

Usage: python run.py
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_dependencies():
    """
    V√©rifie que toutes les d√©pendances sont install√©es.
    """
    logger.info("V√©rification des d√©pendances...")
    
    try:
        import flask
        import sqlalchemy
        import pandas
        import numpy
        import sklearn
        import matplotlib
        import seaborn
        logger.info("‚úÖ Toutes les d√©pendances sont install√©es")
        return True
    except ImportError as e:
        logger.error(f"‚ùå D√©pendance manquante: {e}")
        logger.error("Installez les d√©pendances avec: pip install -r requirements.txt")
        return False

def install_dependencies():
    """
    Installe les d√©pendances depuis requirements.txt
    """
    logger.info("Installation des d√©pendances...")
    
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
        logger.info("‚úÖ D√©pendances install√©es avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erreur lors de l'installation: {e}")
        return False

def initialize_database():
    """
    Initialise la base de donn√©es avec des donn√©es d'exemple.
    """
    logger.info("Initialisation de la base de donn√©es...")
    
    try:
        from database.db_init import init_database
        init_database()
        logger.info("‚úÖ Base de donn√©es initialis√©e")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation: {e}")
        return False

def train_recommendation_model():
    """
    Entra√Æne le mod√®le de recommandation.
    """
    logger.info("Entra√Ænement du mod√®le de recommandation...")
    
    try:
        from recommender.train_model import main as train_main
        train_main()
        logger.info("‚úÖ Mod√®le de recommandation entra√Æn√©")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'entra√Ænement: {e}")
        return False

def start_application():
    """
    Lance l'application Flask.
    """
    logger.info("D√©marrage de l'application...")
    
    try:
        from app import app
        logger.info("üöÄ Application d√©marr√©e sur http://localhost:5000")
        app.run(debug=True, host='0.0.0.0', port=5000)
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du d√©marrage: {e}")
        return False

def main():
    """
    Fonction principale du script de d√©marrage.
    """
    print("="*60)
    print("üõçÔ∏è E-COMMERCE IA - SCRIPT DE D√âMARRAGE")
    print("="*60)
    
    # V√©rification des d√©pendances
    if not check_dependencies():
        logger.info("Tentative d'installation automatique...")
        if not install_dependencies():
            logger.error("‚ùå Impossible d'installer les d√©pendances automatiquement")
            logger.error("Installez manuellement avec: pip install -r requirements.txt")
            return False
    
    # Initialisation de la base de donn√©es
    if not initialize_database():
        logger.error("‚ùå √âchec de l'initialisation de la base de donn√©es")
        return False
    
    # Entra√Ænement du mod√®le
    if not train_recommendation_model():
        logger.warning("‚ö†Ô∏è √âchec de l'entra√Ænement du mod√®le (l'application fonctionnera quand m√™me)")
    
    print("\n" + "="*60)
    print("‚úÖ PR√âPARATION TERMIN√âE")
    print("="*60)
    print("üåê L'application sera accessible sur: http://localhost:5000")
    print("üë§ Comptes de test disponibles:")
    print("   - admin / admin123 (administrateur)")
    print("   - john_doe / password123")
    print("   - jane_smith / password123")
    print("   - mike_wilson / password123")
    print("   - sarah_jones / password123")
    print("   - alex_brown / password123")
    print("="*60)
    
    # D√©marrage de l'application
    start_application()

if __name__ == '__main__':
    main()
